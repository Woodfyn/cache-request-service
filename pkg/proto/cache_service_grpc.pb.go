// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc2
// source: cache_service.proto

package cache_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CacheService_CreateProfile_FullMethodName = "/cache_service.CacheService/CreateProfile"
	CacheService_GetProfile_FullMethodName    = "/cache_service.CacheService/GetProfile"
	CacheService_UpdateProfile_FullMethodName = "/cache_service.CacheService/UpdateProfile"
	CacheService_CreateAvatars_FullMethodName = "/cache_service.CacheService/CreateAvatars"
	CacheService_GetAvatars_FullMethodName    = "/cache_service.CacheService/GetAvatars"
	CacheService_UpdateAvatars_FullMethodName = "/cache_service.CacheService/UpdateAvatars"
	CacheService_Delete_FullMethodName        = "/cache_service.CacheService/Delete"
)

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServiceClient interface {
	CreateProfile(ctx context.Context, in *Request_Create_Profile, opts ...grpc.CallOption) (*Response_Empty, error)
	GetProfile(ctx context.Context, in *Request_Key, opts ...grpc.CallOption) (*Response_Get_Profile, error)
	UpdateProfile(ctx context.Context, in *Request_Update_Profile, opts ...grpc.CallOption) (*Response_Empty, error)
	CreateAvatars(ctx context.Context, in *Request_Create_Avatars, opts ...grpc.CallOption) (*Response_Empty, error)
	GetAvatars(ctx context.Context, in *Request_Key, opts ...grpc.CallOption) (*Response_Get_Avatars, error)
	UpdateAvatars(ctx context.Context, in *Request_Update_Avatars, opts ...grpc.CallOption) (*Response_Empty, error)
	Delete(ctx context.Context, in *Request_Key, opts ...grpc.CallOption) (*Response_Empty, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) CreateProfile(ctx context.Context, in *Request_Create_Profile, opts ...grpc.CallOption) (*Response_Empty, error) {
	out := new(Response_Empty)
	err := c.cc.Invoke(ctx, CacheService_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetProfile(ctx context.Context, in *Request_Key, opts ...grpc.CallOption) (*Response_Get_Profile, error) {
	out := new(Response_Get_Profile)
	err := c.cc.Invoke(ctx, CacheService_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) UpdateProfile(ctx context.Context, in *Request_Update_Profile, opts ...grpc.CallOption) (*Response_Empty, error) {
	out := new(Response_Empty)
	err := c.cc.Invoke(ctx, CacheService_UpdateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) CreateAvatars(ctx context.Context, in *Request_Create_Avatars, opts ...grpc.CallOption) (*Response_Empty, error) {
	out := new(Response_Empty)
	err := c.cc.Invoke(ctx, CacheService_CreateAvatars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetAvatars(ctx context.Context, in *Request_Key, opts ...grpc.CallOption) (*Response_Get_Avatars, error) {
	out := new(Response_Get_Avatars)
	err := c.cc.Invoke(ctx, CacheService_GetAvatars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) UpdateAvatars(ctx context.Context, in *Request_Update_Avatars, opts ...grpc.CallOption) (*Response_Empty, error) {
	out := new(Response_Empty)
	err := c.cc.Invoke(ctx, CacheService_UpdateAvatars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) Delete(ctx context.Context, in *Request_Key, opts ...grpc.CallOption) (*Response_Empty, error) {
	out := new(Response_Empty)
	err := c.cc.Invoke(ctx, CacheService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
// All implementations must embed UnimplementedCacheServiceServer
// for forward compatibility
type CacheServiceServer interface {
	CreateProfile(context.Context, *Request_Create_Profile) (*Response_Empty, error)
	GetProfile(context.Context, *Request_Key) (*Response_Get_Profile, error)
	UpdateProfile(context.Context, *Request_Update_Profile) (*Response_Empty, error)
	CreateAvatars(context.Context, *Request_Create_Avatars) (*Response_Empty, error)
	GetAvatars(context.Context, *Request_Key) (*Response_Get_Avatars, error)
	UpdateAvatars(context.Context, *Request_Update_Avatars) (*Response_Empty, error)
	Delete(context.Context, *Request_Key) (*Response_Empty, error)
	mustEmbedUnimplementedCacheServiceServer()
}

// UnimplementedCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (UnimplementedCacheServiceServer) CreateProfile(context.Context, *Request_Create_Profile) (*Response_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedCacheServiceServer) GetProfile(context.Context, *Request_Key) (*Response_Get_Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedCacheServiceServer) UpdateProfile(context.Context, *Request_Update_Profile) (*Response_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedCacheServiceServer) CreateAvatars(context.Context, *Request_Create_Avatars) (*Response_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvatars not implemented")
}
func (UnimplementedCacheServiceServer) GetAvatars(context.Context, *Request_Key) (*Response_Get_Avatars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatars not implemented")
}
func (UnimplementedCacheServiceServer) UpdateAvatars(context.Context, *Request_Update_Avatars) (*Response_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvatars not implemented")
}
func (UnimplementedCacheServiceServer) Delete(context.Context, *Request_Key) (*Response_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {}

// UnsafeCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServiceServer will
// result in compilation errors.
type UnsafeCacheServiceServer interface {
	mustEmbedUnimplementedCacheServiceServer()
}

func RegisterCacheServiceServer(s grpc.ServiceRegistrar, srv CacheServiceServer) {
	s.RegisterService(&CacheService_ServiceDesc, srv)
}

func _CacheService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_Create_Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).CreateProfile(ctx, req.(*Request_Create_Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetProfile(ctx, req.(*Request_Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_Update_Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).UpdateProfile(ctx, req.(*Request_Update_Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_CreateAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_Create_Avatars)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).CreateAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_CreateAvatars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).CreateAvatars(ctx, req.(*Request_Create_Avatars))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetAvatars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetAvatars(ctx, req.(*Request_Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_UpdateAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_Update_Avatars)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).UpdateAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_UpdateAvatars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).UpdateAvatars(ctx, req.(*Request_Update_Avatars))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Delete(ctx, req.(*Request_Key))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheService_ServiceDesc is the grpc.ServiceDesc for CacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache_service.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _CacheService_CreateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _CacheService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _CacheService_UpdateProfile_Handler,
		},
		{
			MethodName: "CreateAvatars",
			Handler:    _CacheService_CreateAvatars_Handler,
		},
		{
			MethodName: "GetAvatars",
			Handler:    _CacheService_GetAvatars_Handler,
		},
		{
			MethodName: "UpdateAvatars",
			Handler:    _CacheService_UpdateAvatars_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CacheService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache_service.proto",
}
